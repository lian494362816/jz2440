#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/init.h>
#include <linux/delay.h>
#include <linux/device.h>
#include <asm/uaccess.h>
#include <asm/irq.h>
#include <asm/io.h>
#include <asm/arch/regs-gpio.h>
#include <asm/hardware.h>
#include "my_error.h"

#define KEY_IRQ_MODULE_NAME "key irq module"
#define KEY_IRQ_CLASS_NAME  "key_irq_class"
#define KEY_IRQ_CLASS_DEVICE_NAME "key_irqs"
#define KEY_IRQ_MAJOR 0

static unsigned int key_irq_major = 0;
struct class *key_irq_class = NULL;
struct class_device *key_irq_class_dev = NULL;
#if 0
static irqreturn_t key_irq_handle (int irq_num, void *dev_id)
{
    //struct pin_desc *p = (struct pin_desc *)dev_id;

    //PRINT_INFO("pin:%d \n", p->pin);
    //PRINT_INFO("value:%d \n", p->value);

    return IRQ_RETVAL(0);
}
#endif


#if 0
struct key_irq_desc{
    unsigned int irq;
    int (*handler)(int, void *);
    unsigned long irqflags;
    const char *devname;
};

struct pin_desc{
    unsigned int pin;
    unsigned int value;
};



static irqreturn_t key_irq_handle (int irq_num, void *dev_id)
{
    struct pin_desc *p = (struct pin_desc *)dev_id;

    PRINT_INFO("pin:%d \n", p->pin);
    PRINT_INFO("value:%d \n", p->value);

    return 0;
}


struct pin_desc pins_desc[] = {
    {
        .pin = 10,
        .value = 20,
    }
};

struct key_irq_desc key_irq_desc[] = {
    {
        .irq = IRQ_EINT0,
        .handler = key_irq_handle,
        .irqflags = S3C2410_EXTINT_BOTHEDGE,
        .devname = "KEY1",
    }
};

int key_irq_open(struct inode *inode, struct file *file)
{
    int i = 0;

    for (i = 0; i < sizeof(key_irq_desc) / sizeof(key_irq_desc[0]); i++)
    {
        request_irq(key_irq_desc[i].irq, key_irq_desc[i].handler,
                    key_irq_desc[i].irqflags, key_irq_desc[i].devname, &pins_desc[i]);
    }


    return 0;
}
#endif

int key_irq_open(struct inode *inode, struct file *file)
{

    return 0;
}


ssize_t key_irq_read(struct file *file, char __user *usrbuf, size_t count, loff_t *off)
{

    return 0;
}

int key_irq_close (struct inode *inode, struct file *file)
{

    return 0;
}

struct file_operations key_irq_fops = {
    .owner = THIS_MODULE,
    .open = key_irq_open,
    .read = key_irq_read,
    .release = key_irq_close,
};

int key_irq_init(void)
{
    key_irq_major = register_chrdev(KEY_IRQ_MAJOR, KEY_IRQ_MODULE_NAME, &key_irq_fops);
    if (key_irq_major < 0)
    {
        //PRINT_ERR("%s init fail\n", KEY_IRQ_MODULE_NAME);
        return -1;
    }

    /* /sys/class/key_irq_class */
    key_irq_class = class_create(THIS_MODULE, KEY_IRQ_CLASS_NAME);
    if (IS_ERR(key_irq_class))
    {
        //PRINT_ERR("%s create fail\n", KEY_IRQ_CLASS_NAME);
        goto free_chrdev;
    }

    /* /dev/key_irqs */
    key_irq_class_dev = class_device_create(key_irq_class, NULL, MKDEV(key_irq_major, 0), NULL, KEY_IRQ_CLASS_DEVICE_NAME);
    if (IS_ERR(key_irq_class_dev))
    {
        //PRINT_ERR("%s create fail\n", KEY_IRQ_CLASS_DEVICE_NAME);
        goto free_class;
    }

    //PRINT_INFO("key irq module init\n");

    return 0;

free_class:
    class_unregister(key_irq_class);

free_chrdev:
    unregister_chrdev(key_irq_major, KEY_IRQ_MODULE_NAME);
    return -1;
}

void key_irq_exit(void)
{
    class_device_unregister(key_irq_class_dev);
    class_unregister(key_irq_class);

    unregister_chrdev(key_irq_major, KEY_IRQ_MODULE_NAME);

    PRINT_INFO("key irq module exit\n");
}

module_init(key_irq_init);
module_exit(key_irq_exit);

MODULE_LICENSE("GPL");

